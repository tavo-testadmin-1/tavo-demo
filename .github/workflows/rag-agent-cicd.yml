name: RAG Agent CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run unit tests
        run: |
          pytest app/tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  vector-db-validation:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Validate vector database
        run: |
          python -c "from app.services.vector_store import create_vector_store; create_vector_store()"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  prompt-validation:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run prompt validation tests
        run: |
          # Create script to validate prompts
          echo '
          import unittest
          from app.agents.compliance_agent import analyze, summarize
          from app.config.settings import settings
          
          class TestPromptTemplates(unittest.TestCase):
              def test_analyze_prompt_format(self):
                  """Test that the analyze prompt correctly formats variables."""
                  state = {
                      "document": "Test document",
                      "compliance_area": "HIPAA",
                      "retrieved_documents": []
                  }
                  
                  # This will raise an error if the prompt template has formatting issues
                  try:
                      analyze(state)
                      self.fail("Expected exception due to empty retrieved_documents")
                  except Exception as e:
                      # We expect an error due to empty docs, but not a KeyError or formatting error
                      self.assertNotIsInstance(e, KeyError)
                      
              def test_summarize_prompt_format(self):
                  """Test that the summarize prompt correctly formats variables."""
                  state = {
                      "document": "Test document",
                      "compliance_area": "HIPAA",
                      "compliance_issues": ["Issue 1"],
                      "retrieved_documents": []
                  }
                  
                  # This will raise an error if the prompt template has formatting issues
                  try:
                      summarize(state)
                      self.fail("Expected exception due to empty retrieved_documents")
                  except Exception as e:
                      # We expect an error due to empty docs, but not a KeyError or formatting error
                      self.assertNotIsInstance(e, KeyError)
          
          if __name__ == "__main__":
              unittest.main()
          ' > prompt_validation_test.py
          
          python prompt_validation_test.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  langgraph-validation:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Validate Langgraph structure
        run: |
          # Create script to validate Langgraph structure
          echo '
          from app.agents.compliance_agent import ComplianceAgent
          
          # Instantiate agent to validate graph compilation
          agent = ComplianceAgent()
          
          # Validate graph has expected nodes
          expected_nodes = ["retrieve", "analyze", "summarize"]
          actual_nodes = list(agent.workflow._graph.nodes.keys())
          
          # Check if all expected nodes are present
          missing_nodes = [node for node in expected_nodes if node not in actual_nodes]
          if missing_nodes:
              raise ValueError(f"Missing expected nodes: {missing_nodes}")
          
          print("Langgraph structure validation passed!")
          ' > validate_langgraph.py
          
          python validate_langgraph.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [test, vector-db-validation, prompt-validation, langgraph-validation]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run benchmark tests
        run: |
          # Create script to run performance benchmarks
          echo '
          import time
          from app.agents.compliance_agent import ComplianceAgent
          
          # Test documents
          documents = [
            "Patient data was shared with the research team without explicit consent.",
            "Medical records were updated but some fields were left blank."
          ]
          
          # Initialize agent
          agent = ComplianceAgent()
          
          # Run benchmarks
          results = []
          for doc in documents:
              start_time = time.time()
              result = agent.run(document=doc, compliance_area="HIPAA")
              duration = time.time() - start_time
              
              # Check result validity
              assert "compliance_issues" in result
              assert "suggestions" in result
              assert "references" in result
              
              results.append({
                  "document_length": len(doc),
                  "issues_found": len(result["compliance_issues"]),
                  "suggestions": len(result["suggestions"]),
                  "references": len(result["references"]),
                  "duration_seconds": duration
              })
          
          print("Benchmark Results:")
          for i, res in enumerate(results):
              print(f"Document {i+1}:")
              print(f"  Duration: {res['duration_seconds']:.2f} seconds")
              print(f"  Issues found: {res['issues_found']}")
              print(f"  Suggestions: {res['suggestions']}")
              print(f"  References: {res['references']}")
          ' > benchmark.py
          
          python benchmark.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [test, vector-db-validation, prompt-validation, langgraph-validation, benchmark]
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: healthcare-compliance-rag
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service --cluster healthcare-compliance-cluster \
            --service healthcare-compliance-service \
            --force-new-deployment 